package com.example.chatbotrag.service;

import org.springframework.stereotype.Service;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

@Service
public class ChatService {
    
    private final VectorSearchService vectorSearchService;
    private final HybridSearchService hybridSearchService;
    private final OllamaClientService ollamaClient;
    
    public ChatService(VectorSearchService vectorSearchService, 
                       HybridSearchService hybridSearchService,
                       OllamaClientService ollamaClient) {
        this.vectorSearchService = vectorSearchService;
        this.hybridSearchService = hybridSearchService;
        this.ollamaClient = ollamaClient;
    }

    public List<String> ask(String sessionId, String userQuestion, String forcedLang) {
        System.out.println("[CHAT_SERVICE] üöÄ D√©but du traitement de la question: " + userQuestion);
        
        // 1. üéØ V√©rifications pr√©liminaires
        if (userQuestion != null) {
            String q = userQuestion.trim().toLowerCase();
            // Reconnaissance des salutations et expressions courantes
            if (q.matches(".*\\b(bonjour|coucou|hello|salut|bonsoir|hi|hey)\\b.*") ||
                q.matches(".*\\b(ca va|cava|√ßa va|comment √ßa va|comment ca va)\\b.*") ||
                q.matches(".*\\b(quoi de neuf|comment tu vas|comment allez-vous)\\b.*")) {
                return Collections.singletonList("üëã Bonjour ! √áa va bien, merci ! Comment puis-je vous aider avec vos questions douani√®res aujourd'hui ?");
            }
            // Reconnaissance des questions g√©n√©rales sur l'aide
            if (q.matches(".*\\b(aide|help|aidez-moi|comment utiliser|que peux-tu faire)\\b.*")) {
                return Collections.singletonList("ü§ù Je suis votre assistant douanier sp√©cialis√© ! Je peux vous aider avec :\n\n" +
                    "‚Ä¢ üìã Codes SH et classifications tarifaires\n" +
                    "‚Ä¢ üí∞ Droits de douane et taxes √† l'importation\n" +
                    "‚Ä¢ üåç Accords commerciaux et tarifs pr√©f√©rentiels\n" +
                    "‚Ä¢ üì¶ R√©glementations d'importation au Maroc\n\n" +
                    "Posez-moi une question sp√©cifique sur un produit √† importer !");
            }
        }
        if (userQuestion == null || userQuestion.isBlank()) {
            return Collections.singletonList("D√©sol√©, je n'ai pas de r√©ponse pour votre question.");
        }
        
        // 2. üîç Recherche hybride des documents pertinents
        System.out.println("[CHAT_SERVICE] üîç Recherche hybride des documents pertinents...");
        final int MAX_CONTEXT_CHUNKS = 3; // R√©duit pour √©viter les timeouts
        
        // Utilisation de la recherche hybride
        List<HybridSearchService.HybridSearchResult> hybridResults = hybridSearchService.searchHybrid(userQuestion, MAX_CONTEXT_CHUNKS);
        
        // Extraction des chunks textuels pour compatibilit√©
        List<String> topChunks = new ArrayList<>();
        for (HybridSearchService.HybridSearchResult result : hybridResults) {
            topChunks.add(result.getText());
        }
        
        // Debug: Log the chunks found
        System.out.println("[CHAT_SERVICE] üìä R√©sultats hybrides trouv√©s: " + hybridResults.size());
        for (int i = 0; i < hybridResults.size(); i++) {
            HybridSearchService.HybridSearchResult result = hybridResults.get(i);
            String preview = result.getText().substring(0, Math.min(100, result.getText().length())).replace("\n", " ");
            System.out.println("[CHAT_SERVICE] R√©sultat " + i + " (score: " + 
                               String.format("%.3f", result.getTotalScore()) + "): " + preview + "...");
            
            // Log metadata info if available
            if (result.getMetadata() != null) {
                System.out.println("[CHAT_SERVICE] - M√©tadonn√©es: SH=" + result.getMetadata().getCodeSh() + 
                                   ", Type=" + result.getMetadata().getTypeProduit() + 
                                   ", √âtat=" + result.getMetadata().getEtatProduit());
            }
            
            // Check for specific content
            if (result.getText().contains("0101292000")) {
                System.out.println("[CHAT_SERVICE] ‚úÖ TROUV√â CODE SH 0101292000 dans r√©sultat " + i);
            }
        }
        
        if (topChunks.isEmpty()) {
            return Collections.singletonList("D√©sol√©, je n'ai pas d'information sur ce sujet dans ma base documentaire.");
        }
        
        // 3. ü§ñ Mode de r√©ponse: Choisir entre REGEX (legacy) ou LLM (Mistral)
        boolean useLLM = shouldUseLLM(userQuestion, topChunks);
        
        if (useLLM) {
            System.out.println("[CHAT_SERVICE] ü§ñ Mode LLM activ√© - G√©n√©ration avec Mistral");
            return generateLLMResponse(userQuestion, topChunks, forcedLang);
        } else {
            System.out.println("[CHAT_SERVICE] ‚öôÔ∏è Mode REGEX activ√© - Traitement traditionnel");
            return generateFallbackResponse(userQuestion, topChunks);
        }
    }
    
    /**
     * üß† D√©cision intelligente : utiliser LLM ou REGEX
     */
    private boolean shouldUseLLM(String userQuestion, List<String> chunks) {
        // Crit√®res pour utiliser le LLM:
        // 1. Question complexe (plus de 8 mots)
        // 2. Question contenant des mots interrogatifs
        // 3. Contexte riche (plus de 2 chunks trouv√©s)
        
        String[] questionWords = userQuestion.split("\\s+");
        boolean isComplexQuestion = questionWords.length > 6;
        
        String questionLower = userQuestion.toLowerCase();
        boolean hasInterrogativeWords = questionLower.matches(".*(comment|pourquoi|quand|combien|quel|quelle|quels|quelles|expliquer|d√©tails|diff√©rence).*");
        
        boolean hasRichContext = chunks.size() > 1;
        
        // Pour l'instant, utilisons toujours le LLM si des chunks sont trouv√©s
        return !chunks.isEmpty();
    }
    
    /**
     * ü§ñ G√©n√©ration de r√©ponse avec Mistral LLM
     */
    private List<String> generateLLMResponse(String userQuestion, List<String> chunks, String forcedLang) {
        try {
            // 1. üìã Construction du contexte
            StringBuilder contextBuilder = new StringBuilder();
            contextBuilder.append("CONTEXTE DOCUMENTAIRE:\n");
            for (int i = 0; i < chunks.size(); i++) {
                contextBuilder.append("Document ").append(i + 1).append(":\n");
                contextBuilder.append(chunks.get(i)).append("\n\n");
            }
            
            // 2. üìù Construction du prompt pour Mistral
            String systemPrompt = construireMistralPrompt();
            String fullPrompt = systemPrompt + "\n\n" + contextBuilder.toString() + 
                               "\nQUESTION: " + userQuestion + 
                               "\n\nR√âPONSE (respectez strictement le format demand√©):";
            
            System.out.println("[MISTRAL] üì§ Envoi du prompt √† Mistral...");
            System.out.println("[DEBUG] PROMPT COMPLET:");
            System.out.println("=" + "=".repeat(80));
            System.out.println(fullPrompt);
            System.out.println("=" + "=".repeat(80));
            
            // 3. üöÄ Appel √† Mistral
            String mistralResponse = ollamaClient.generateWithMistral(fullPrompt);
            
            if (mistralResponse != null && !mistralResponse.trim().isEmpty()) {
                System.out.println("[MISTRAL] ‚úÖ R√©ponse re√ßue de Mistral (" + mistralResponse.length() + " caract√®res)");
                System.out.println("[DEBUG] R√âPONSE MISTRAL:");
                System.out.println("-" + "-".repeat(80));
                System.out.println(mistralResponse);
                System.out.println("-" + "-".repeat(80));
                
                // 4. üé® Post-traitement pour l'affichage web
                String formattedResponse = formatForWeb(mistralResponse);
                return Collections.singletonList(formattedResponse);
            } else {
                System.err.println("[MISTRAL] ‚ùå R√©ponse vide de Mistral, fallback vers r√©ponse basique");
                return generateFallbackResponse(userQuestion, chunks);
            }
            
        } catch (Exception e) {
            System.err.println("[MISTRAL] ‚ùå Erreur lors de la g√©n√©ration LLM: " + e.getMessage());
            e.printStackTrace();
            return generateFallbackResponse(userQuestion, chunks);
        }
    }
    
    /**
     * üìù Construction du prompt syst√®me pour Mistral (g√©n√©rique pour tous codes SH)
     */
    private String construireMistralPrompt() {
        return "Tu es un assistant douanier expert sp√©cialis√© dans les codes SH, droits de douane et r√©glementations d'importation au Maroc.\n" +
               "\nTon objectif est d'extraire les informations EXACTES des documents fournis et de les pr√©senter de mani√®re structur√©e.\n" +
               "\nCommence toujours ta r√©ponse par une phrase d'introduction personnalis√©e selon la question, par exemple :\n" +
               "'Pour l'importation de [produit] au Maroc, voici les informations cl√©s √† prendre en compte :'\n" +
               "\nPuis structure ta r√©ponse EXACTEMENT selon ce format professionnel :\n\n" +
               
               "Position Tarifaire\n" +
               "Code SH : [code √† 10 chiffres exact trouv√© dans le document]\n" +
               "Description : [description compl√®te et pr√©cise du produit selon le document, copie exacte].\n\n" +
               
               "Droits et Taxes\n" +
               "Droit d'Importation (DI) : [pourcentage exact trouv√© dans le document]\n" +
               "Taxe Parafiscale √† l'Importation (TPI) : [pourcentage exact trouv√© dans le document]\n" +
               "Taxe sur la Valeur Ajout√©e √† l'Importation (TVA) : [pourcentage exact trouv√© dans le document]\n\n" +
               
               "Accords et Conventions\n" +
               "Les [produits concern√©s] peuvent b√©n√©ficier de droits pr√©f√©rentiels dans le cadre des accords suivants :\n\n" +
               "[Liste UNIQUEMENT les accords trouv√©s dans les documents avec leurs taux EXACTS]\n\n" +
               
               "R√àGLES STRICTES D'EXTRACTION :\n" +
               "1. COPIE EXACTEMENT les informations comme √©crites dans les documents\n" +
               "2. N'invente JAMAIS de valeurs - utilise UNIQUEMENT les donn√©es pr√©sentes dans les documents\n" +
               "3. Si une information n'est pas pr√©sente dans les documents, √©cris 'Non sp√©cifi√© dans les documents'\n" +
               "4. CHERCHE tous les codes SH (patterns √† 10 chiffres) pr√©sents dans les documents\n" +
               "5. IDENTIFIE automatiquement le code SH correspondant au produit de la question\n" +
               "6. Pour les pourcentages, copie exactement les valeurs avec le symbole %\n" +
               "7. Pour les accords commerciaux, liste SEULEMENT ceux mentionn√©s explicitement avec leurs taux\n" +
               "8. Respecte exactement le format sans emojis ni formatage HTML\n" +
               "9. Remplace [produit] et [produits concern√©s] par le nom exact du produit de la question\n" +
               "10. Si plusieurs documents sont fournis, utilise celui qui correspond le mieux √† la question\n" +
               "11. Privil√©gie le document contenant le code SH exact correspondant au produit demand√©\n" +
               "12. ANALYSE le contenu pour identifier automatiquement le bon code SH m√™me si non mentionn√© explicitement";
    }
    
    /**
     * üé® Formatage de la r√©ponse pour l'affichage web
     */
    private String formatForWeb(String mistralResponse) {
        // Conversion des sauts de ligne en balises HTML
        String formatted = mistralResponse.replace("\n", "<br>");
        
        // Formatage sp√©cial pour les titres (sans emojis)
        formatted = formatted.replace("Position Tarifaire", "<br><strong style='color:#2563eb; font-size:1.2em;'>Position Tarifaire</strong>")
                            .replace("Droits et Taxes", "<br><br><strong style='color:#059669; font-size:1.2em;'>Droits et Taxes</strong>")
                            .replace("Accords et Conventions", "<br><br><strong style='color:#7c3aed; font-size:1.2em;'>Accords et Conventions</strong>");
        
        // Formatage pour les codes SH et descriptions importantes
        formatted = formatted.replace("Code SH :", "<br><strong style='color:#1f2937;'>Code SH :</strong>")
                            .replace("Description :", "<br><strong style='color:#1f2937;'>Description :</strong>");
        
        // Formatage pour les taxes et droits
        formatted = formatted.replace("Droit d'Importation (DI) :", "<br><strong>Droit d'Importation (DI) :</strong>")
                            .replace("Taxe Parafiscale √† l'Importation (TPI) :", "<br><strong>Taxe Parafiscale √† l'Importation (TPI) :</strong>")
                            .replace("Taxe sur la Valeur Ajout√©e √† l'Importation (TVA) :", "<br><strong>Taxe sur la Valeur Ajout√©e √† l'Importation (TVA) :</strong>");
        
        // Formatage pour les accords commerciaux
        formatted = formatted.replace("Union Europ√©enne :", "<br>Union Europ√©enne :")
                            .replace("Ligue Arabe :", "<br>Ligue Arabe :")
                            .replace("Accord d'Agadir :", "<br>Accord d'Agadir :")
                            .replace("√âtats-Unis :", "<br>√âtats-Unis :")
                            .replace("Zone de libre-√©change continentale africaine", "<br>Zone de libre-√©change continentale africaine")
                            .replace("√âmirats Arabes Unis :", "<br>√âmirats Arabes Unis :")
                            .replace("Irak :", "<br>Irak :")
                            .replace("Libye :", "<br>Libye :")
                            .replace("Royaume-Uni :", "<br>Royaume-Uni :")
                            .replace("Alg√©rie :", "<br>Alg√©rie :");
        
        // Nettoyage des balises en trop au d√©but
        if (formatted.startsWith("<br>")) {
            formatted = formatted.substring(4);
        }
        
        // Suppression des doubles <br> cons√©cutifs excessifs
        formatted = formatted.replaceAll("(<br>){3,}", "<br><br>");
        
        return formatted;
    }
    
    /**
     * ‚öôÔ∏è M√©thode de fallback simple
     */
    private List<String> generateFallbackResponse(String userQuestion, List<String> chunks) {
        System.out.println("[FALLBACK] ‚öôÔ∏è G√©n√©ration de r√©ponse basique");
        
        // R√©ponse simple bas√©e sur les chunks trouv√©s
        StringBuilder response = new StringBuilder();
        response.append("üìã Informations trouv√©es dans la base documentaire :<br><br>");
        
        for (int i = 0; i < Math.min(chunks.size(), 3); i++) {
            String chunk = chunks.get(i);
            // Extraire les premi√®res lignes importantes
            String preview = chunk.length() > 200 ? chunk.substring(0, 200) + "..." : chunk;
            response.append("üìÑ Extrait ").append(i + 1).append(":<br>");
            response.append(preview.replace("\n", "<br>"));
            response.append("<br><br>");
        }
        
        response.append("‚ÑπÔ∏è Pour une analyse d√©taill√©e, veuillez pr√©ciser votre question.");
        
        return Collections.singletonList(response.toString());
    }
}
